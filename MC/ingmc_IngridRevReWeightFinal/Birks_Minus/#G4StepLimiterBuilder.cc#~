
 //
 // ********************************************************************
 // * License and Disclaimer                                           *
 // *                                                                  *
 // * The  Geant software  is  copyright of the Copyright Holders  of *
6 // * the Geant Collaboration.  It is provided  under  the terms  and *
7 // * conditions of the Geant Software License,  included in the file *
8 // * LICENSE and available at  http://cern.ch/geant/license .  These *
9 // * include a list of copyright holders.                             *
 // *                                                                  *
 // * Neither the authors of this software system, nor their employing *
 // * institutes,nor the agencies providing financial support for this *
 // * work  make  any representation or  warranty, express or implied, *
 // * regarding  this  software system or assume any liability for its *
 // * use.  Please see the license in the file  LICENSE  and URL above *
6 // * for the full disclaimer and the limitation of liability.         *
7 // *                                                                  *
8 // * This  code  implementation is the result of  the  scientific and *
9 // * technical work of the GEANT collaboration.                      *
 // * By using,  copying,  modifying or  distributing the software (or *
 // * any work based  on the software)  you  agree  to acknowledge its *
 // * use  in  resulting  scientific  publications,  and indicate your *
 // * acceptance of all terms of the Geant Software license.          *
 // ********************************************************************
 //
6 // $Id$
7 //
8 //---------------------------------------------------------------------------
9 //
 // ClassName:   GStepLimiterBuilder
 //
 // Author:      V.Ivanchenko ..
 //
 // Modified:
 //
6 //----------------------------------------------------------------------------
7 //
8 //
9 //....oooOOOOooo........oooOOOOooo........oooOOOOooo........oooOOOOooo......
 //....oooOOOOooo........oooOOOOooo........oooOOOOooo........oooOOOOooo......
 
 #include "GStepLimiterBuilder.hh"
 
 #include "GParticleDefinition.hh"
 #include "GProcessManager.hh"
6 
7 #include "GStepLimiter.hh"
8 #include "GUserSpecialCuts.hh"
9 
 // factory
 #include "GPhysicsConstructorFactory.hh"
 //
 G_DECLARE_PHYSCONSTR_FACTORY(GStepLimiterBuilder);
 
 //....oooOOOOooo........oooOOOOooo........oooOOOOooo........oooOOOOooo......
6 
7 GStepLimiterBuilder::GStepLimiterBuilder(const GString& name)
  8    :  GVPhysicsConstructor(name)
    9 {
    6   fStepLimiter = new GStepLimiter();
    6   fUserSpecialCuts = new GUserSpecialCuts();
    6 }
6 
6 //....oooOOOOooo........oooOOOOooo........oooOOOOooo........oooOOOOooo......
6 
66 GStepLimiterBuilder::~GStepLimiterBuilder()
  67 {
  68   delete fStepLimiter;
  69   delete fUserSpecialCuts;
  7 }
7 
7 //....oooOOOOooo........oooOOOOooo........oooOOOOooo........oooOOOOooo......
7 
7 void GStepLimiterBuilder::ConstructParticle()
  7 {}
76 
77 //....oooOOOOooo........oooOOOOooo........oooOOOOooo........oooOOOOooo......
78 
79 void GStepLimiterBuilder::ConstructProcess()
  8 {
  8   theParticleIterator->reset();
8 
  8   while ((*theParticleIterator)()) {
    8     GParticleDefinition* particle = theParticleIterator->value();
    8     GProcessManager* pmanager = particle->GetProcessManager();
    86     Gdouble charge = particle->GetPDGCharge();
87 
  88     if(!particle->IsShortLived()) {
  89       if (charge != .) {
    9         // All charged particles should have a step limiter
      9         // to make sure that the steps do not get too long.
9         pmanager->AddDiscreteProcess(fStepLimiter);
9         pmanager->AddDiscreteProcess(fUserSpecialCuts);
9 } else {
	  9         // Energy cuts for all other neutral particles
	    96         pmanager->AddDiscreteProcess(fUserSpecialCuts);
	  97 }
98 }
99 }
 }
 
 //....oooOOOOooo........oooOOOOooo........oooOOOOooo........oooOOOOooo......
