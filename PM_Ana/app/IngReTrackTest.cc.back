#include<iostream>
#include<sstream>
#include<fstream>
using namespace std;
#include <iomanip.h>
#include <sys/stat.h>

#include <TROOT.h>
#include <TStyle.h>
#include <TApplication.h>
#include <TFile.h>
#include <TCanvas.h>
#include <TTree.h>
#include <TClonesArray.h>
#include <TObject.h>
#include <TEventList.h>
#include <TBranch.h>
#include <TH1.h>

#include <TGraph.h>
#include <TGaxis.h>
#include <TMarker.h>
#include <TText.h>
#include <TMath.h>
#include <TSpectrum.h>
#include <TBox.h>
#include <TLatex.h>
#include <TString.h>
#include <TSystem.h>

#include "TApplication.h"
//#include "setup.hxx"
//#include "INGRID_Dimension.hxx"
//#include "root_setup.hxx"
#include "INGRIDEVENTSUMMARY.h"
#include "IngridHitSummary.h"
#include "IngridSimHitSummary.h"
#include "IngridSimVertexSummary.h"
#include "IngridSimParticleSummary.h"
#include "BeamInfoSummary.h"
#include "IngridBasicReconSummary.h"
#include "IngridTrackSummary.h"

//#include "ReconTrack.cxx"
#include "ReconTrackBasic.cxx"
#include "IngEvtDisp.cxx"

ReconTrackBasic* frecontrack;
IngEvtDisp* fingevtdisp;

//#define DEBUG
//#define DEBUG2
int main(int argc,char *argv[]){
  TROOT root("GUI","GUI");
  TApplication theApp("App",0,0);
  frecontrack = new ReconTrackBasic();
  fingevtdisp = new IngEvtDisp();

  char buff1[300];
  int run_number;
  int sub_run_number=0;
  int n;
  Int_t c=-1;  char FileName[300];
  while ((c = getopt(argc, argv, "r:s:f:b:")) != -1) {
    switch(c){
    case 'r':
      run_number=atoi(optarg);
      sprintf(FileName,"%s/ingrid_%08d_%04d_recon2.root",
	      dst_data,
	      run_number,
	      sub_run_number);
      break;
    case 's':
      sub_run_number=atoi(optarg);
      sprintf(FileName,"%s/ingrid_%08d_%04d_recon2.root",
	      dst_data,
	      run_number,
	      sub_run_number);
      break;
    case 'f':
      sprintf(FileName,"%s",optarg);
      run_number=77;
      break;
    }
  }
  FileStat_t fs;
  ifstream timing;


  int      counter[2]={0};

  //######## read root file #############################
  //#####################################################
  cout<<"reading "<<FileName<<"....."<<endl;
  if(gSystem->GetPathInfo(FileName,fs)){
    cout<<"Cannot open file "<<FileName<<endl;
    exit(1);
  }
  IngridEventSummary* evt = new IngridEventSummary();
  TFile*            rfile = new TFile(FileName,"read");
  TTree*             tree = (TTree*)rfile -> Get("tree");
  TBranch*          EvtBr = tree->GetBranch("fDefaultReco.");
  EvtBr                   ->SetAddress(&evt);
  tree                    ->SetBranchAddress("fDefaultReco.", &evt);
  int                nevt = (int)tree -> GetEntries();
  cout << "Total # of events = " << nevt <<endl;

  //#### make rootfile after analysis #####
  sprintf(buff1,"%s/ingrid_%08d_%04d_retrack.root",
	  dst_data,run_number, sub_run_number);
  TFile*            wfile = new TFile(buff1,"recreate");
  TTree*            wtree = new TTree("tree","tree");
  IngridEventSummary* wsummary = new IngridEventSummary(); 
  wtree              -> Branch   ("fDefaultReco.","IngridEventSummary", 
				 &wsummary,  64000,   99);

  IngridHitSummary*          inghitsum;
  IngridHitSummary*        inghitsum_t; 
  IngridBasicReconSummary*  basicrecon;
  BeamInfoSummary*            beaminfo;

#ifdef DEBUG
  TCanvas* evtdisp = new TCanvas("c1","c1",10,10,700,500);
#endif
  TRef  fIngridHit[INGRIDHIT_MAXHITS];
  for(int ievt=0; ievt<nevt; ievt++){
    cout<<"------------- event:"<<ievt<<"  ----------------"<<endl;
    evt      -> Clear();
    tree     -> GetEntry(ievt);

    beaminfo = (BeamInfoSummary*)evt->GetBeamSummary(0);
    int nbrecon  = evt -> NIngridBasicRecons();
    for(int i=0; i<nbrecon; i++){
      basicrecon = (IngridBasicReconSummary*)evt->GetBasicRecon(i);
      int   nactpln   = basicrecon -> nactpln;
      float layerpe   = basicrecon -> layerpe;
      int   actinarow = basicrecon -> actinarow;
 
      float dir[3];
      for(int i=0; i<3;i++)dir[i] = simpar->dir[i];
 
      if( nactpln    >   2 &&           
	  layerpe    > 6.5 
	  ){
	//#######################################################################
	//#### First Tracking Start  ############################################
	//#######################################################################
	//#######################################################################
 	//#### Add IngridHit to TRef #####
	//################################
	int nhit    = basicrecon -> nhits;
	for( int ihit=0; ihit<INGRIDHIT_MAXHITS; ihit++ ){
	  fIngridHit[ihit] = 0;
	  fIngridHit[ihit] = TRef( (IngridHitSummary*)basicrecon->GetIngridHit(ihit) );
	}
#ifdef DEBUG
	evtdisp     -> Clear();
	fingevtdisp -> Draw_Module ( *evtdisp );
	fingevtdisp -> Draw_Module ( *evtdisp );
	fingevtdisp -> Draw_Hit_A  ( *basicrecon,0.1 );
	fingevtdisp -> Draw_Hit_A  ( *basicrecon,0.1 );
	fingevtdisp -> Draw_BeamInfo  ( *beaminfo );
#endif
	frecontrack -> Clear();
	frecontrack -> SetHit(fIngridHit);
	bool FirstTrackingSuccess = frecontrack -> ReconTrack();
	if( FirstTrackingSuccess ){
	  double ax, ay;
	  basicrecon -> hastrk   = true;
	  basicrecon -> matchtrk = frecontrack -> TrkMatching(); 

	  for(int v=0; v<2; v++){
	    IngridTrackSummary* trk = frecontrack -> GetTrack(v, 0);
	    trk -> view = v;
	    evt -> AddTrack(trk);
	    IngridTrackSummary* ttt = (IngridTrackSummary*)evt->GetTrack(evt->NIngridTracks()-1);
	    basicrecon -> AddTrack(ttt);
	    //### VETO ?? ###
	    //###############
	    if( frecontrack -> is1stTPL(v) || frecontrack->isUVETO(v) 
		 || frecontrack -> UVETOisTrack(v))
	      basicrecon -> vetowtracking = true;
	    if( frecontrack->UEdgeisTrack(v) )
	      basicrecon -> edgewtracking = true;
	    if(v==FromX){
	      ay = ttt -> tx;
	      basicrecon -> vertexy.clear();	    
	      basicrecon -> vertexy.push_back( frecontrack->GetInitialXY(v) );
	      basicrecon -> vertexyz = frecontrack->GetInitialZ(v);
	    } 
	    if(v==FromY){
	      ax = ttt -> tx;
	      basicrecon -> vertexx.clear();	    
	      basicrecon -> vertexx.push_back( frecontrack->GetInitialXY(v) );
	      basicrecon -> vertexxz = frecontrack->GetInitialZ(v);
	    } 
	 
#ifdef DEBUG
	    cout<<"Tracking suceeded."<<endl;
	    TF1* f = new TF1("f","pol1",0,130);
	    cout<<trk->etx<<endl;
	    f   -> SetParameter(0, trk->etx);
	    f   -> SetParameter(1, trk->tx);
	    fingevtdisp -> Draw_Line(*f, v,trk->vtxi[2],trk->vtxf[2]);
#endif
	  } 


	  basicrecon -> angle = TMath::ATan( sqrt(ax*ax + ay*ay) ) /
	    TMath::Pi() * 180;
	  counter[0]++;
	  counter[1]++;
	}
	//#######################################################################
	//#### First Tracking End  ##############################################
	//#######################################################################
	//#######################################################################



#ifdef DEBUG
	//### debug test
	int diffverz = abs (basicrecon -> vertexxz - basicrecon -> vertexyz); 
	if(diffverz <= 1)
	  continue;
	cout << "difference of vertex z=" << diffverz << endl;


	if( frecontrack -> is1stTPL( 0 ) )
	  cout << "view 0:first tpl has track point." << endl;
	if( frecontrack -> is1stTPL( 1 ) )
	  cout << "view 1:first tpl has track point." << endl;
	if( frecontrack -> isUVETO( 0 ) )
	  cout << "view 0:upstream veto has hit." << endl;
	if( frecontrack -> isUVETO( 1 ) )
	  cout << "view 1:upstream veto has hit." << endl;
	if( frecontrack -> UEdgeisTrack( 0 ) )
	  cout << "view 0:edge has track point." << endl;
	if( frecontrack -> UEdgeisTrack( 1 ) )
	  cout << "view 1:edge has track point." << endl;
	if( frecontrack -> UVETOisTrack(0) )
	  cout << "view 0:upstream veto is track." << endl;
	if( frecontrack -> UVETOisTrack(1) )
	  cout << "view 1:upstream veto is track." << endl;


	evtdisp     -> Update();
	//frecontrack -> Print();
	cin.get();
#endif

      }//like
    }

    wsummary = evt;
    wtree -> Fill();
  }//Event Loop



  //######## Write and Close ####################
  wtree -> Write();
  wfile -> Write();
  wfile -> Close();

}
 
