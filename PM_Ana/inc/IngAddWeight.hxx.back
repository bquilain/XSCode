#include<iostream>
#include<sstream>
#include<fstream>
using namespace std;
#include <iomanip.h>
#include <sys/stat.h>

#include <TROOT.h>
#include <TStyle.h>
#include <TApplication.h>
#include <TFile.h>
#include <TCanvas.h>
#include <TTree.h>
#include <TClonesArray.h>
#include <TObject.h>
#include <TEventList.h>
#include <TBranch.h>
#include <TH1.h>

#include <TGraph.h>
#include <TGaxis.h>
#include <TMarker.h>
#include <TText.h>
#include <TMath.h>
#include <TSpectrum.h>
#include <TBox.h>
#include <TLatex.h>
#include <TString.h>
#include <TSystem.h>

#include "TApplication.h"

//#include "root_setup.hxx"                                                    
#include "INGRIDEVENTSUMMARY.h"
#include "IngridHitSummary.h"
#include "IngridSimHitSummary.h"
#include "IngridSimVertexSummary.h"
#include "IngridSimParticleSummary.h"
#include "BeamInfoSummary.h"
#include "IngridBasicReconSummary.h"

#include "IngridConstants.h"

FileStat_t fs;

#define NUMU 0
#define NUMUBAR 1
#define NUE 2
#define NUEBAR 3
class Weight{
public:
  float Emin;
  float Emax;
  float weight;
};
vector<Weight> vWeight[4][14]; //Flavor, module


//### Set Weight[Enu] from histogram
const static char* fTxtPath_Weight = "/home/ingrid/EnuWeight/txt";

float Get_Weight(int flavor, int mod, float Enu){
  for(int i=0; i<vWeight[flavor][mod].size(); i++){
    if( vWeight[flavor][mod][i].Emin <  Enu &&
	vWeight[flavor][mod][i].Emax >= Enu 
	)
      return vWeight[flavor][mod][i].weight;
  }
  if( Enu>25000 )//>25GeV
    return 0;
  cout << "no energy" << endl;
  cin.get();
  return -1.e-5;

}

bool Set_Weight(){
  ifstream f;
  char FileName[300];
  for(int imod=0; imod<14; imod++){
    sprintf( FileName,"%s/enuweight_numu.root.mod%02d.txt", fTxtPath_Weight,imod );

    if(gSystem->GetPathInfo(FileName,fs)){
      cout<<"Cannot open file "<<FileName<<endl;
      return false;
    }

    f.open( FileName );

    float Emin, Emax, weight;
    while( f>>Emin>>Emax>>weight ){
      Weight t;
      t.Emin   = Emin;
      t.Emax   = Emax;
      t.weight = weight;
      vWeight[NUMU][imod].push_back(t);
     
    }
    f.close();
  }
  return true;
}
