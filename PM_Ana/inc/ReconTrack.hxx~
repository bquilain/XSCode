#ifndef _RECONTRACK_HXX
#define _RECONTRACK_HXX

#include <TROOT.h>
#include <TStyle.h>
#include <TApplication.h>
#include <TFile.h>
#include <TTree.h>
#include <TEventList.h>
#include <TBranch.h>
#include <TH1.h>
#include <TH2.h>
#include <TGraph.h>
#include <TGaxis.h>
#include <TMarker.h>
#include <TText.h>
#include <TSpectrum.h>
#include <TF1.h>
#include <TMath.h>
#include <TSpectrum.h>
#include "setup.hxx"

//### INGRID-j data structure ####
//################################
#include "INGRIDEVENTSUMMARY.h"
#include "IngridHitSummary.h"
#include "IngridSimHitSummary.h"
#include "IngridSimVertexSummary.h"
#include "IngridSimParticleSummary.h"
#include "BeamInfoSummary.h"
#include "IngridBasicReconSummary.h"

const static int  THETA_RESOLUTION =  200; //1024;
const static int  RHO_RESOLUTION   =  1300; //1000;
const static int  RHO_RESOLUTION_H =  RHO_RESOLUTION/2;//500;
const static int  isReconTrackN    =    4; // reason:???
const static int  N_BREAKHOUGH     =    3; // because at least 3 hits
const static double            pai = 6*asin(0.5)/THETA_RESOLUTION;
const static int  max_ntry         = 1;
const static int  max_ntrack       = 4;

const static int  reset_region_theta = 20;
const static int  reset_region_rho   = 20;
class ReconTrack{
private:
  TF1*            fFtrack_x[max_ntrack];  //### reconstructed x-tracks
  TF1*            fFtrack_y[max_ntrack];  //### reconstructed y-tracks

  double          sn[THETA_RESOLUTION];                     //### sin array for quick calc. 
  double          cs[THETA_RESOLUTION];                     //### cos array for quick calc. 

  //### variables for theta-rho space
  int             theta;  
  int             rho;
  //### For Debug ####
  TH2F*   fH2_theta_rho_x;
  TH2F*   fH2_theta_rho_y;

public:
  int             ntrack_x;               //### number of x-tracks
  int             ntrack_y;               //### number of y-tracks

  ReconTrack();
  ~ReconTrack();
  bool HoughTrans(IngridBasicReconSummary& reduc);

  TF1*     Track_x(int i){
    if(i>=0 && i < ntrack_x)
      return fFtrack_x[i];
    return 0;
  }
  TF1*     Track_y(int i){
    if(i>=0 && i < ntrack_y)
      return fFtrack_y[i];
    return 0;
  }

  void Draw_Hough(TCanvas& c1);
  
  void debug();
  void Reset();    
  
};

#endif
