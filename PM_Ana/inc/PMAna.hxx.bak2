#ifndef __PMANA_HXX__
#define __PMANA_HXX__

// ROOT includes
#include "TApplication.h"
#include "TFile.h"
#include "TH1F.h"
#include "TF1.h"
#include "TGraph.h"
#include "TH2F.h"
#include "TCanvas.h"
#include <TStyle.h>
#include "TString.h"
#include "TSystem.h"
#include "TSpectrum.h"
#include "TTree.h"
//C++ libraly includes
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip.h>
#include <algorithm>
#include <deque>
#include <vector>
#include <sys/stat.h>
#include <unistd.h> // using getopt      
using namespace std;
// INGRID includes
#include "PMrecon.hxx"

//__________________________________________________________


class Hits{
public:

  Int_t    mod;
  Int_t    view;
  Int_t    pln;
  Int_t    ch;
  Int_t    pdg;
  Float_t  pe;
  Float_t  lope;
  Bool_t   isohit;

  void clear(){

    mod    = -1;
    view   = -1;
    pln    = -1;
    ch     = -1;
    pdg    = -1;
    pe     = -1.e-5;
    lope   = -1.e-5;
    isohit = false;
  }
};



class TrackIng{
public:
  Int_t     mod;
  Int_t     view;
  Int_t     ipln;
  Int_t     fpln;
  Float_t    ixy;
  Float_t    fxy;
  Float_t     iz;
  Float_t     fz;
  Float_t  slope;
  Float_t intcpt;
  Float_t    ang;
  Float_t  clstime;
  Bool_t    veto;
  Bool_t    edge;
  Bool_t    stop;
  Float_t vetodist;
  vector<Hits> hit;  
  //Float_t totpe;
  //Int_t isohit;
  //vector<Int_t> hitid;
  //vector<Bool_t> isohit;
  //Int_t pdg[4];

  void clear(){
    mod    =  -1;
    view   =  -1;
    ipln   =  -1;
    fpln   =  -1;
    ixy    =  -1.e-5;
    fxy    =  -1.e-5;
    iz     =  -1.e-5;
    fz     =  -1.e-5;
    slope  =  -1.e-5;
    intcpt =  -1.e-5;
    ang    =  -1.e-5;
    clstime=  -1.e-5;
    veto   = false;
    edge   = false;
    stop   = false;
    vetodist   =  -1.e-5;
    hit.clear();
    //hitid.clear();
    //isohit.clear();
    //totpe   =  -1.e-5;
    //isohit   =  -1;
    //memset(pdg,-1,sizeof(pdg));
  }
};



class TrackPM{
public:
  
  Int_t     view;
  Int_t     ipln;
  Int_t     fpln;
  Float_t    ixy;
  Float_t    fxy;
  Float_t     iz;
  Float_t     fz;
  Float_t  slope;
  Float_t intcpt;
  Float_t    ang;
  Float_t  clstime;
  Bool_t    veto;
  Bool_t    edge;
  Bool_t    stop;  
  Int_t    ing_imod;
  Int_t    ing_fmod;
  Int_t    ing_ipln;
  Int_t    ing_fpln;
  Bool_t   ing_trk;
  Bool_t   pm_stop;
  Bool_t   ing_stop;
  Int_t    iron_pene;
  vector<Hits> hit;  
  
  void clear(){
    view   =  -1;
    ipln   =  -1;
    fpln   =  -1;
    ixy    =  -1.e-5;
    fxy    =  -1.e-5;
    iz     =  -1.e-5;
    fz     =  -1.e-5;
    slope  =  -1.e-5;
    intcpt =  -1.e-5;
    ang    =  -1.e-5;
    clstime=  -1.e-5;
    veto   = false;
    edge   = false;
    stop   = false;
    ing_imod = -1;
    ing_fmod = -1;
    ing_ipln = -1;
    ing_fpln = -1;
    ing_trk = false;
    pm_stop = false;
    ing_stop = false;
    iron_pene = -1;
    hit.clear();
  }
};


class Trk{
public:

  Float_t  x;
  Float_t  y;
  Float_t  z;
  Float_t  zx;
  Float_t  zy;

  Int_t    startxpln;
  Int_t    startypln;
  Float_t    startxch;
  Float_t    startych;
  Int_t    endxpln;
  Int_t    endypln;
  Float_t    endxch;
  Float_t    endych;
  Float_t  thetax;
  Float_t  thetay;
  Float_t  angle;
  Int_t    ing_startmod;
  Int_t    ing_endmod;
  Int_t    ing_startpln;
  Int_t    ing_endpln;
  Bool_t   ing_trk;
  Bool_t   pm_stop;
  Bool_t   ing_stop;
  Float_t  sci_range;
  Float_t  iron_range;
  Int_t    iron_pene;
  Bool_t   vetowtracking; // Upstream VETO
  Bool_t   edgewtracking; // Fiducial CUT
  Int_t    pdg;
  Float_t  trkpe;

  void clear(){

    x=  -1.e-5;
    y=  -1.e-5;
    z=  -1.e-5;
    zx=  -1.e-5;
    zy=  -1.e-5;
    startxpln= -1;
    startypln= -1;
    startxch=  -1.e-5;
    startych=  -1.e-5;
    endxpln= -1;
    endypln= -1;
    endxch=  -1.e-5;
    endych=  -1.e-5;
    thetax=  -1.e-5;
    thetay=  -1.e-5;
    angle=  -1.e-5;
    ing_startmod= -1;
    ing_endmod= -1;
    ing_startpln= -1;
    ing_endpln= -1;
    ing_trk= false;
    pm_stop= false;
    ing_stop= false;
    sci_range=  -1.e-5;
    iron_range=  -1.e-5;
    iron_pene= -1;
    vetowtracking=false; // Upstream VETO
    edgewtracking=false; // Fiducial CUT
    pdg = -1;
    trkpe =  -1.e-5;
  }
};




class PMTrack{
public:

  Int_t Ntrack;
  Int_t Ningtrack;
  Float_t  clstime;
  Bool_t   vetowtracking; // Upstream VETO
  Bool_t   edgewtracking; // Fiducial CUT

  vector<Trk>    trk;

  void clear(){
    Ntrack = -1;
    Ningtrack = -1;
    clstime = -1.e-5;
    vetowtracking=false; // Upstream VETO
    edgewtracking=false; // Fiducial CUT
    trk.clear();
  }
};


vector<PMTrack> pmtrack;
vector<TrackPM> htrack;
vector<TrackPM> vtrack;
vector<TrackIng> hingtrack;
vector<TrackIng> vingtrack;



bool withend(const TrackPM& left, const TrackPM& right){
  if(left.fpln != right.fpln)
    return left.fpln > right.fpln;
  else if(left.ipln != right.ipln)
    return left.ipln < right.ipln;
  else
    return fabs(left.ang) < fabs(right.ang);
};

bool withcenter(const TrackIng& left, const TrackIng& right){
  if(abs(left.mod-3) != abs(right.mod-3))
    return abs(left.mod-3) < abs(right.mod-3);
  else if(left.ipln != right.ipln)
    return left.ipln < right.ipln;
  else if(left.fpln != right.fpln)
    return left.fpln > right.fpln;
  else
    return fabs(left.ang) < fabs(right.ang);
};

bool fSortTrack(vector<TrackPM> &a){
  std::stable_sort(a.begin(), a.end(), withend);
};

bool fIngSortTrack(vector<TrackIng> &a){
  std::stable_sort(a.begin(), a.end(), withcenter);
};

bool fIngPMJoint(vector<TrackIng> &itrk, vector<TrackPM> &ptrk, bool vertical){
  float diff_ang, diff_pos,joilik=-1e-5;
  int joitra=-1;
  bool jointed;
  bool hasingtrk=false;
  for(int j=0;j<itrk.size();j++){

    jointed=false;

    for(int i=0;i<ptrk.size();i++){
      
      if(itrk[j].mod==3){
	if(itrk[j].ipln>1)continue;
	if(ptrk[i].fpln<16)continue;
      }
      else if(vertical){
	if(itrk[j].ipln>1&&(!itrk[j].veto)&&(!itrk[j].edge))continue;
	if(ptrk[i].fpln<16&&ptrk[i].stop)continue;
      }

      diff_ang=ptrk[i].ang-itrk[j].ang;
      diff_pos=(ptrk[i].intcpt+ptrk[i].slope*946.75)-(itrk[j].intcpt+itrk[j].slope*946.75);//zpos = (1079.5+814)/2
      
      if(fabs(diff_ang)<35&&fabs(diff_pos)<85){

	if(jointed){
	  if(joilik>sqrt(fabs(diff_ang)*fabs(diff_ang)/35/35+fabs(diff_pos)*fabs(diff_pos)/85/85))	   
	    ptrk[joitra].ing_trk=false;

	  else
	    continue;
	}


	if(ptrk[i].ing_trk == false){
	  ptrk[i].ing_imod   = itrk[j].mod;
	  ptrk[i].ing_fmod   = itrk[j].mod;
	  ptrk[i].ing_ipln   = itrk[j].ipln;
	  ptrk[i].ing_fpln   = itrk[j].fpln;
	  ptrk[i].ing_trk    = true;
	  ptrk[i].ing_stop   = itrk[j].stop;
	  
	  if(hingtrack[j].fpln==10)
	    ptrk[i].iron_pene  = itrk[j].fpln - itrk[j].ipln-1;
	  else
	    ptrk[i].iron_pene  = itrk[j].fpln - itrk[j].ipln;
	}
	
	else{
	  if(abs(itrk[j].mod-3) <= abs(ptrk[i].ing_fmod-3))continue;
	  if(itrk[j].ipln < ptrk[i].ing_fpln)continue;
	  
	  ptrk[i].ing_fmod   = itrk[j].mod;
	  ptrk[i].ing_fpln   = itrk[j].fpln;
	  ptrk[i].ing_stop   = itrk[j].stop;
	  
	  if(hingtrack[j].fpln==10)
	    ptrk[i].iron_pene  += itrk[j].fpln - itrk[j].ipln-1;
	  else
	    ptrk[i].iron_pene  += itrk[j].fpln - itrk[j].ipln;
	}

	jointed=true;
	joitra=i;
	joilik=sqrt(fabs(diff_ang)*fabs(diff_ang)/35/35+fabs(diff_pos)*fabs(diff_pos)/85/85);
	hasingtrk=true;

      }//if
    }//ptrk
  }//itrk

  return hasingtrk;
};


float PE(float pe,float lope, int mod, int pln, int ch){
  float Pe;
  if(1.422*lope+pe<100)
    Pe=pe;
  else
    Pe=1.422*lope;
  if(mod==16&&pln>0&&ch>=8&&ch<24)
    Pe=Pe/2;

  return Pe;
};

int pdg2num(int pdg){
  int num;
  if(abs(pdg)==13)        num=0;
  else if(abs(pdg)==211)  num=1;
  else if(abs(pdg)==321)  num=2;
  else if(abs(pdg)==2212) num=3;
  else if(abs(pdg)==2112) num=4;
  else if(abs(pdg)==11)   num=5;
  else                    num=6;
  return num;
};

int num2pdg(int *trkpdg){
  int num=0;
  int pdg;
  //for(int i=1;i<5;i++){
  for(int i=1;i<6;i++){
    if(trkpdg[num]<=trkpdg[i])num=i;
  }
  //if(trkpdg[num]==0&&trkpdg[5]>0)num=5;
  //else if(trkpdg[num]==0)num=6;
  if(trkpdg[num]==0)num=6;

  if(num==0)      pdg = 13;
  else if(num==1) pdg = 211;
  else if(num==2) pdg = 321;
  else if(num==3) pdg = 2212;
  else if(num==4) pdg = 2112;
  else if(num==5) pdg = 11;
  else if(num==6) pdg = 0;
  return pdg;
};


void fAddPE(vector<Hits> &allhit, float ang, float &totalpe, int &totalhit, int *trkpdg,int ipln){
  bool hitpln[18];
  memset(hitpln,false,sizeof(hitpln));
  for(int k=0;k<allhit.size();k++){
    if(!allhit[k].isohit)continue;
    if(allhit[k].pln==ipln)continue;
    totalpe+=PE(allhit[k].pe,allhit[k].lope,allhit[k].mod,allhit[k].pln,allhit[k].ch)*cos(ang*3.14159265/180);
    trkpdg[pdg2num(allhit[k].pdg)]++;
    hitpln[allhit[k].pln]=true;
  }
  for(int i=0;i<18;i++){
    if(hitpln[i])totalhit++;
  }
};

void fTrackMatch(){


};


bool fPMAna(){

  int pln_th  =2;
  float ch_th =150;

  PMTrack track;
  Trk     trk;
  pmtrack.clear();

  if(htrack.size()==0||vtrack.size()==0)return false;

  fIngSortTrack(hingtrack);
  fIngSortTrack(vingtrack);
  fSortTrack(htrack);
  fSortTrack(vtrack);

  if(!fIngPMJoint(hingtrack,htrack,false))return false;
  if(!fIngPMJoint(vingtrack,vtrack,true))return false;

  vector<int> id_h,id_v,track_h,track_v;
  vector<bool> tracked_h,tracked_v,used_h,used_v;
  tracked_h.clear();tracked_v.clear();
  for(int i=0;i<htrack.size();i++)tracked_h.push_back(false);
  for(int j=0;j<vtrack.size();j++)tracked_v.push_back(false);
  for(int dif=0;dif<4;dif++){
    for(int pln=0;pln<plnmax(16)-1;pln++){//16 means PM
      id_h.clear();id_v.clear();
      used_h.clear();used_v.clear();
      for(int i=0;i<htrack.size();i++){
	if(!htrack[i].ing_trk)continue;
	if(tracked_h[i])continue;
	if((htrack[i].ipln-pln)>dif||(htrack[i].ipln-pln)<0)continue;
	id_h.push_back(i);
	used_h.push_back(false);
      }
      for(int j=0;j<vtrack.size();j++){
	if(!vtrack[j].ing_trk)continue;
	if(tracked_v[j])continue;
	if((vtrack[j].ipln-pln)>dif||(vtrack[j].ipln-pln)<0)continue;
	id_v.push_back(j);
	used_v.push_back(false);
      }

      track_h.clear();track_v.clear();
      for(int ddif=0;ddif<plnmax(3)-1;ddif++){
	for(int dpln=plnmax(3)-1;dpln>=0;dpln--){
	  for(int i=0;i<id_h.size();i++){
	    if((htrack[id_h[i]].ing_fpln-dpln)>ddif||(htrack[id_h[i]].ing_fpln-dpln)<0)continue;
	    for(int j=0;j<id_v.size();j++){
	      if(htrack[id_h[i]].clstime!=vtrack[id_v[j]].clstime)continue;
	      if(used_h[i])continue;
	      if(used_v[j])continue;
	      if((vtrack[id_v[j]].ing_fpln-dpln)>ddif||(vtrack[id_v[j]].ing_fpln-dpln)<0)continue;
	      track_h.push_back(id_h[i]);
	      track_v.push_back(id_v[j]);
	      used_h[i]=true;
	      used_v[j]=true;
	    }
	  }
	}
      }//ddif

      for(int k=0;k<track_h.size();k++){
	int h=track_h[k];
	int v=track_v[k];
	
	track.clear();
	
	tracked_h[h]=true;
	tracked_v[v]=true;

	trk.startxpln=htrack[h].ipln;
	trk.startypln=vtrack[v].ipln;
	trk.startxch=htrack[h].ixy;
	trk.startych=vtrack[v].ixy;
	trk.x=htrack[h].ixy;
	trk.y=vtrack[v].ixy;
	trk.endxpln=htrack[h].fpln;
	trk.endypln=vtrack[v].fpln;
	trk.endxch=htrack[h].fxy;
	trk.endych=vtrack[v].fxy;	
	
	trk.thetax=htrack[h].ang;
	trk.thetay=vtrack[v].ang;

	float trkang=180/3.14159265*atan(sqrt(pow(tan(htrack[h].ang*3.14159265/180),2)+pow(tan(vtrack[v].ang*3.14159265/180),2)));

	trk.angle=trkang;
	trk.vetowtracking=htrack[h].veto||vtrack[v].veto;
	trk.edgewtracking=htrack[h].edge||vtrack[v].edge;
       
	if(abs(vtrack[v].ing_imod-3)<abs(htrack[h].ing_imod-3))
	  trk.ing_startmod=vtrack[v].ing_imod;
	else
	  trk.ing_startmod=htrack[h].ing_imod;

	if(abs(vtrack[v].ing_fmod-3)>abs(htrack[h].ing_fmod-3))
	  trk.ing_endmod=vtrack[v].ing_fmod;
	else
	  trk.ing_endmod=htrack[h].ing_fmod;

	if(vtrack[v].ing_ipln<htrack[h].ing_ipln)
	  trk.ing_startpln=vtrack[v].ing_ipln;
	else
	  trk.ing_startpln=htrack[h].ing_ipln;

	if(vtrack[v].ing_fpln>htrack[h].ing_fpln)
	  trk.ing_endpln=vtrack[v].ing_fpln;
	else
	  trk.ing_endpln=htrack[h].ing_fpln;

	trk.ing_trk=(htrack[h].ing_trk||vtrack[v].ing_trk);
	trk.pm_stop=(htrack[h].stop&&vtrack[v].stop);
	trk.ing_stop=(htrack[h].ing_stop&&vtrack[v].ing_stop);

	if(!trk.ing_trk){
	  trk.iron_pene=0;
	  trk.iron_range=0;
	}
	else if(vtrack[v].iron_pene>htrack[h].iron_pene){
	  trk.iron_pene=vtrack[v].iron_pene;
	  trk.iron_range=vtrack[v].iron_pene/cos(trkang*3.14159265/180);
	}
	else{
	  trk.iron_pene=htrack[h].iron_pene;
	  trk.iron_range=htrack[h].iron_pene/cos(trkang*3.14159265/180);
	}

	if((vtrack[v].fpln-vtrack[v].ipln)>(htrack[h].fpln-htrack[h].ipln))
	  trk.sci_range=(vtrack[v].fpln-vtrack[v].ipln)/cos(trkang*3.14159265/180);
	else
	  trk.sci_range=(htrack[h].fpln-htrack[h].ipln)/cos(trkang*3.14159265/180);

	float totalpe=0;
	int totalhit=0;
	int trkpdg[7];
	memset(trkpdg,0,sizeof(trkpdg));
	fAddPE(htrack[h].hit,trkang,totalpe,totalhit,trkpdg,htrack[h].ipln);
	fAddPE(vtrack[v].hit,trkang,totalpe,totalhit,trkpdg,vtrack[v].ipln);
	if(totalhit>0){
	  trk.trkpe=totalpe/totalhit;
	}
	else{
	  trk.trkpe=0;
	}
	trk.pdg=num2pdg(trkpdg);
	
	track.trk.push_back(trk);
	track.clstime=(htrack[h].clstime+htrack[v].clstime)/2;
	track.vetowtracking=htrack[h].veto||vtrack[v].veto;
	track.edgewtracking=htrack[h].edge||vtrack[v].edge;
	track.Ntrack=1;
	track.Ningtrack=1;
	
	pmtrack.push_back(track);
	
      }//for
      
    }//pln
  }//dif
    
    

  for(int i=0;i<pmtrack.size();i++){
    for(int j=i+1;j<pmtrack.size();j++){

      if(pmtrack[i].Ntrack == 0||pmtrack[j].Ntrack == 0)continue;

      if(abs((pmtrack[i].trk[0].startxpln)-(pmtrack[j].trk[0].startxpln))+abs((pmtrack[i].trk[0].startypln)-(pmtrack[j].trk[0].startypln))>pln_th)continue;
      if(fabs((pmtrack[i].trk[0].y)-(pmtrack[j].trk[0].y)+fabs((pmtrack[i].trk[0].x)-(pmtrack[j].trk[0].x)))>ch_th)continue;


      bool former = false;

      if((pmtrack[i].vetowtracking||pmtrack[i].edgewtracking)&&
	 (pmtrack[j].vetowtracking||pmtrack[j].edgewtracking)&&
	 (pmtrack[i].trk[0].endxpln+pmtrack[i].trk[0].endypln)<(pmtrack[j].trk[0].endxpln+pmtrack[j].trk[0].endypln)){
	former=false;
      }
      else if((pmtrack[i].vetowtracking||pmtrack[i].edgewtracking)&&
	      (pmtrack[j].vetowtracking||pmtrack[j].edgewtracking)){
	former=true;
      }     
      else if(pmtrack[j].vetowtracking||pmtrack[j].edgewtracking){
	former=false;
      }
      else if(pmtrack[i].vetowtracking||pmtrack[i].edgewtracking){
	former=true;
      }
      else if((pmtrack[i].trk[0].endxpln+pmtrack[i].trk[0].endypln)<(pmtrack[j].trk[0].endxpln+pmtrack[j].trk[0].endypln)){
	former=false;
      }
      else{
	former=true;
      }

      if(former){
	pmtrack[i].Ntrack += pmtrack[j].Ntrack;
	pmtrack[j].Ntrack =0;
	pmtrack[i].Ningtrack += pmtrack[j].Ningtrack;
	pmtrack[j].Ningtrack =0;
	for(int t=0;t<pmtrack[j].trk.size();t++)pmtrack[i].trk.push_back(pmtrack[j].trk[t]);
	pmtrack[j].trk.clear();
      }
      else{
	pmtrack[j].Ntrack += pmtrack[i].Ntrack;
	pmtrack[i].Ntrack =0;
	pmtrack[j].Ningtrack += pmtrack[i].Ningtrack;
	pmtrack[i].Ningtrack =0;
	for(int t=0;t<pmtrack[i].trk.size();t++)pmtrack[j].trk.push_back(pmtrack[i].trk[t]);
	pmtrack[i].trk.clear();
      }


    }
  }


  for(int k=0;k<pmtrack.size();k++){
    if(pmtrack[k].Ntrack==0)continue;
    for(int h=0;h<htrack.size();h++){
      if(tracked_h[h])continue;
      for(int v=0;v<vtrack.size();v++){
	if(tracked_v[v])continue;

	if(abs((pmtrack[k].trk[0].startxpln)-(htrack[h].ipln))+abs((pmtrack[k].trk[0].startypln)-(vtrack[v].ipln))>pln_th)continue;
	if(fabs((pmtrack[k].trk[0].y)-(vtrack[v].ixy)+fabs((pmtrack[k].trk[0].x)-(htrack[h].ixy)))>ch_th)continue;

	tracked_h[h]=true;
	tracked_v[v]=true;

	trk.clear();

	trk.startxpln=htrack[h].ipln;
	trk.startypln=vtrack[v].ipln;
	trk.startxch=htrack[h].ixy;
	trk.startych=vtrack[v].ixy;
	trk.x=htrack[h].ixy;
	trk.y=vtrack[v].ixy;
	trk.endxpln=htrack[h].fpln;
	trk.endypln=vtrack[v].fpln;
	trk.endxch=htrack[h].fxy;
	trk.endych=vtrack[v].fxy;	
	
	trk.thetax=htrack[h].ang;
	trk.thetay=vtrack[v].ang;

	float trkang=180/3.14159265*atan(sqrt(pow(tan(htrack[h].ang*3.14159265/180),2)+pow(tan(vtrack[v].ang*3.14159265/180),2)));

	trk.angle=trkang;
	trk.vetowtracking=htrack[h].veto||vtrack[v].veto;
	trk.edgewtracking=htrack[h].edge||vtrack[v].edge;
       
	if(abs(vtrack[v].ing_imod-3)<abs(htrack[h].ing_imod-3))
	  trk.ing_startmod=vtrack[v].ing_imod;
	else
	  trk.ing_startmod=htrack[h].ing_imod;

	if(abs(vtrack[v].ing_fmod-3)>abs(htrack[h].ing_fmod-3))
	  trk.ing_endmod=vtrack[v].ing_fmod;
	else
	  trk.ing_endmod=htrack[h].ing_fmod;

	if(vtrack[v].ing_ipln<htrack[h].ing_ipln)
	  trk.ing_startpln=vtrack[v].ing_ipln;
	else
	  trk.ing_startpln=htrack[h].ing_ipln;

	if(vtrack[v].ing_fpln>htrack[h].ing_fpln)
	  trk.ing_endpln=vtrack[v].ing_fpln;
	else
	  trk.ing_endpln=htrack[h].ing_fpln;

	trk.ing_trk=(htrack[h].ing_trk||vtrack[v].ing_trk);
	trk.pm_stop=(htrack[h].stop&&vtrack[v].stop);
	trk.ing_stop=(htrack[h].ing_stop&&vtrack[v].ing_stop);


	if(!trk.ing_trk){
	  trk.iron_pene=0;
	  trk.iron_range=0;
	}
	else if(vtrack[v].iron_pene>htrack[h].iron_pene){
	  trk.iron_pene=vtrack[v].iron_pene;
	  trk.iron_range=vtrack[v].iron_pene/cos(trkang*3.14159265/180);
	}
	else{
	  trk.iron_pene=htrack[h].iron_pene;
	  trk.iron_range=htrack[h].iron_pene/cos(trkang*3.14159265/180);
	}

	if((vtrack[v].fpln-vtrack[v].ipln)>(htrack[h].fpln-htrack[h].ipln))
	  trk.sci_range=(vtrack[v].fpln-vtrack[v].ipln)/cos(trkang*3.14159265/180);
	else
	  trk.sci_range=(htrack[h].fpln-htrack[h].ipln)/cos(trkang*3.14159265/180);


	float totalpe=0;
	int totalhit=0;
	int trkpdg[7];
	memset(trkpdg,0,sizeof(trkpdg));
	fAddPE(htrack[h].hit,trkang,totalpe,totalhit,trkpdg,htrack[h].ipln);
	fAddPE(vtrack[v].hit,trkang,totalpe,totalhit,trkpdg,vtrack[v].ipln);
	if(totalhit>0){
	  trk.trkpe=totalpe/totalhit;
	}
	else{
	  trk.trkpe=0;
	}
	trk.pdg=num2pdg(trkpdg);


	pmtrack[k].trk.push_back(trk);
	pmtrack[k].Ntrack ++;
	
      }
    }
  }


  return true;
};


#endif
