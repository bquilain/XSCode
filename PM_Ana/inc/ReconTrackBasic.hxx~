#ifndef _RECONTRACKBASIC_HXX
#define _RECONTRACKBASIC_HXX

#include <TROOT.h>
#include <TStyle.h>
#include <TApplication.h>
#include <TFile.h>
#include <TTree.h>
#include <TEventList.h>
#include <TBranch.h>
#include <TH1.h>
#include <TH2.h>
#include <TGraph.h>
#include <TGaxis.h>
#include <TMarker.h>
#include <TText.h>
#include <TSpectrum.h>
#include <TF1.h>
#include <TMath.h>
#include <TSpectrum.h>
#include "setup.hxx"

//### INGRID-j data structure ####
//################################
#include "INGRIDEVENTSUMMARY.h"
#include "IngridHitSummary.h"
#include "IngridSimHitSummary.h"
#include "IngridSimVertexSummary.h"
#include "IngridSimParticleSummary.h"
#include "BeamInfoSummary.h"
#include "IngridBasicReconSummary.h"

#include "IngridConstants.h"

const static int max_ntrack       =   5;
const static int TolOfPoint       =   1;
const static int TolOfMatching    =   1;
const static int TolOfFirstPoint  =   6;
const static int TolVetoFit       =   5; //cm
const static int isTrkNHit        =   3; 
//_______________________________________________________________

class ReconTrackBasic{
private:
  IngridTrackSummary*       ftrkxy[2][max_ntrack];
  IngridTrackSummary*         ftrk[max_ntrack];
  IngridHitSummary*           hit[INGRIDHIT_MAXHITS];

  int                            nhits;
  int                        md_pln[2];
  vector<pair<int, int> > trk_point[2]; // <plane, ch> **[view]
  int                         n_trk[2];
  int                          n_match;

  bool                    ftplistrk[2];
  bool                   uvetoistrk[2];
  bool                  uvetohashit[2];

  float                         vpe[2];

public:
  ReconTrackBasic();
  ~ReconTrackBasic();

  bool SetHit(TRef inghit[]);

  bool Clear();
  bool ReconTrack      (  );
  bool ReconTrackXY    ( int v );

  bool Last3TPL        ( int v );
  bool AddTrkPoint     ( int v, int cpln);
  bool AddVETOPoint    ( int v );
  bool Point2Trk       ( int v );
  bool TrkMatching      ( int n );
  bool MargeTrkXY      ( int ntrk0, int ntrk1 );

  bool FirstTPLisTrack ( int v );
  bool UVETOisTrack    ( int v ); //### Not Ready
  bool UVETOhasHit     ( int v );
  bool FitTrack        ( IngridTrackSummary& trk );
  int  GetInitialZ     ( int v );
  int  GetInitialXY    ( int v );
  int  GetLastZ        ( int v );
  int  GetLastXY       ( int v );

  vector<int>         fTdcHit  (int view, int pln);

  IngridTrackSummary* GetTrack (int v   , int i) const;
  bool                is1stTPL (int v)const {return ftplistrk[v];}
  bool                isUVETO  (int v)const {return uvetohashit[v];}
  //bool FillTrkSummary();
  //bool MakeTrack();
  float               Vpe(int v)const {return vpe[v];}

  void Print();
};

#endif
