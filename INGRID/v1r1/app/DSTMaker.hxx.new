#ifndef __DSTMAKER_HXX__
#define __DSTMAKER_HXX__

// ND280 software includes
#include "TMidasBank.hxx"
#include "TMidasFile.hxx"
#include "TMidasBankProxy.hxx"
#include "TMidasBankProxyRegistry.hxx"
#include "TND280RawEvent.hxx"
#include "TRawDataHeader.hxx"
// oaRawEvent includes
#include "TTripTDigitBank.hxx"
#include "TRunInfoBank.hxx"
#include "TMidasTripTDigitItr.hxx"
#include "TMidasTripTDigit.hxx"
#include "TMCMBank.hxx"
#include "TTriggerBank.hxx"
// ROOT includes
#include "TApplication.h"
#include "TFile.h"
#include "TH1F.h"
#include "TF1.h"
#include "TGraph.h"
#include "TH2F.h"
#include "TCanvas.h"
#include <TStyle.h>
#include "TString.h"
#include "TSystem.h"
#include "TSpectrum.h"
#include "TTree.h"
//C++ libraly includes
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip.h>
#include <algorithm>
#include <deque>
#include <vector>
#include <sys/stat.h>
#include <unistd.h> // using getopt      
using namespace std;
// INGRID includes
#include "setup.hxx"
#include "INGRID_Ch_config.cxx"
#include "INGRID_BadCh_mapping.cxx"
#include "INGRID_Dimension.cxx"
#include "IngridConstants.hxx"
// INGRID data structure
#include "INGRIDEVENTSUMMARY.h"
#include "IngridHitSummary.h"
#include "IngridSimHitSummary.h"
#include "IngridSimParticleSummary.h"
#include "IngridSimVertexSummary.h"
#include "BeamInfoSummary.h"
//#include "IngridBasicReconSummary.h"


//__________________________________________________________
//##### Temporary data class before add IngridHitSummary Class    #######
//##### after sort with cycle, add this to IngridHitSummary Class #######
class Hit{
public:
  Int_t       mod;
  Int_t       pln;
  Int_t      view;
  Int_t        ch;
  Int_t       adc;
  Float_t      pe;   //p.e.
  Long_t      tdc;  
  Long_t     time;   //nsec
  Long_t       t0;//
  Long_t   rawtdc;//
};
//__________________________________________________________
Int_t                 NumEvt;
Int_t                 TrgId;
Int_t                 cAnaEvt;
Int_t                 cAnaTrg;
Int_t                 cAnaMod;
Int_t                 cAnaCyc;

//__________________________________________________________
const static Double_t     cTdcBin  = 2.5;
const static Int_t        cTrgBin  =  10;
Int_t                     fTrgTime ;

//__________________________________________________________


TFile*                 fTFile;
TTree*                   tree;
IngridEventSummary*   summary;
IngridHitSummary*   inghitsum;
bool                   cosmic;

const long constant = 100000000;
Int_t  fActNum[11]; //threshold

void Book(Int_t run, Int_t subrun){
  char buff[300];
  sprintf(buff,"/home/ingrid/data/dst/ingrid_%08d_%04d.root",run,subrun);
  if(cosmic)
    sprintf(buff,"/home/ingrid/data/inter_spill_cosmic/ingrid_%08d_%04d_cosmic.root",run,subrun);
  fTFile   = new TFile(buff,"recreate");
  tree     = new TTree("tree","tree");
  summary  = new IngridEventSummary();
  inghitsum= new IngridHitSummary();
  tree->Branch("fDefaultReco.", "IngridEventSummary",
	       &summary, 64000, 99);
}
void Save(){
  tree->AutoSave();
}

void WriteOnly(){
  tree->Write();
  fTFile->Write();
 
}
void Write(){
  tree->Write();
  fTFile->Write();
  fTFile->Close();
}

#endif
