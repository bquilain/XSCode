//
// File generated by /home/bquilain/Ingrid_Process/ROOT/v5r20p00n02/Linux-x86_64/bin/rootcint at Tue Jun 25 13:37:03 2013

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TINGRID_version_Dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void NDcLcLTINGRID_version_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_NDcLcLTINGRID_version(void *p = 0);
   static void *newArray_NDcLcLTINGRID_version(Long_t size, void *p);
   static void delete_NDcLcLTINGRID_version(void *p);
   static void deleteArray_NDcLcLTINGRID_version(void *p);
   static void destruct_NDcLcLTINGRID_version(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ND::TINGRID_version*)
   {
      ::ND::TINGRID_version *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ND::TINGRID_version >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ND::TINGRID_version", ::ND::TINGRID_version::Class_Version(), "./../src/TINGRID_version.hxx", 15,
                  typeid(::ND::TINGRID_version), DefineBehavior(ptr, ptr),
                  &::ND::TINGRID_version::Dictionary, isa_proxy, 4,
                  sizeof(::ND::TINGRID_version) );
      instance.SetNew(&new_NDcLcLTINGRID_version);
      instance.SetNewArray(&newArray_NDcLcLTINGRID_version);
      instance.SetDelete(&delete_NDcLcLTINGRID_version);
      instance.SetDeleteArray(&deleteArray_NDcLcLTINGRID_version);
      instance.SetDestructor(&destruct_NDcLcLTINGRID_version);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ND::TINGRID_version*)
   {
      return GenerateInitInstanceLocal((::ND::TINGRID_version*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ND::TINGRID_version*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace ND {
//______________________________________________________________________________
TClass *TINGRID_version::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TINGRID_version::Class_Name()
{
   return "ND::TINGRID_version";
}

//______________________________________________________________________________
const char *TINGRID_version::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ND::TINGRID_version*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TINGRID_version::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ND::TINGRID_version*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TINGRID_version::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ND::TINGRID_version*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TINGRID_version::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ND::TINGRID_version*)0x0)->GetClass();
   return fgIsA;
}

} // namespace ND
      namespace ND {
//______________________________________________________________________________
void TINGRID_version::Streamer(TBuffer &R__b)
{
   // Stream an object of class ND::TINGRID_version.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ND::TINGRID_version::Class(),this);
   } else {
      R__b.WriteClassBuffer(ND::TINGRID_version::Class(),this);
   }
}

} // namespace ND
//______________________________________________________________________________
      namespace ND {
void TINGRID_version::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class ND::TINGRID_version.
      TClass *R__cl = ::ND::TINGRID_version::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef ND::TPackageVersion baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
}

} // namespace ND
namespace ROOT {
   // Wrappers around operator new
   static void *new_NDcLcLTINGRID_version(void *p) {
      return  p ? new(p) ::ND::TINGRID_version : new ::ND::TINGRID_version;
   }
   static void *newArray_NDcLcLTINGRID_version(Long_t nElements, void *p) {
      return p ? new(p) ::ND::TINGRID_version[nElements] : new ::ND::TINGRID_version[nElements];
   }
   // Wrapper around operator delete
   static void delete_NDcLcLTINGRID_version(void *p) {
      delete ((::ND::TINGRID_version*)p);
   }
   static void deleteArray_NDcLcLTINGRID_version(void *p) {
      delete [] ((::ND::TINGRID_version*)p);
   }
   static void destruct_NDcLcLTINGRID_version(void *p) {
      typedef ::ND::TINGRID_version current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ND::TINGRID_version

/********************************************************
* ../dict/TINGRID_version_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTINGRID_version_Dict();

extern "C" void G__set_cpp_environmentTINGRID_version_Dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("../src/TINGRID_version.hxx");
  G__cpp_reset_tagtableTINGRID_version_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevTINGRID_version_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ND::TINGRID_version */
static int G__TINGRID_version_Dict_141_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ND::TINGRID_version* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ND::TINGRID_version[n];
     } else {
       p = new((void*) gvp) ND::TINGRID_version[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ND::TINGRID_version;
     } else {
       p = new((void*) gvp) ND::TINGRID_version;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ND::TINGRID_version::Get());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const ND::TINGRID_version*) G__getstructoffset())->GetCompilationMachineInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ND::TINGRID_version::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ND::TINGRID_version::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ND::TINGRID_version::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ND::TINGRID_version::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ND::TINGRID_version*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ND::TINGRID_version::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ND::TINGRID_version::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ND::TINGRID_version::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TINGRID_version_Dict_141_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ND::TINGRID_version::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TINGRID_version_Dict_141_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ND::TINGRID_version* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ND::TINGRID_version(*(ND::TINGRID_version*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ND::TINGRID_version G__TNDcLcLTINGRID_version;
static int G__TINGRID_version_Dict_141_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ND::TINGRID_version*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ND::TINGRID_version*) (soff+(sizeof(ND::TINGRID_version)*i)))->~G__TNDcLcLTINGRID_version();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ND::TINGRID_version*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ND::TINGRID_version*) (soff))->~G__TNDcLcLTINGRID_version();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TINGRID_version_Dict_141_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ND::TINGRID_version* dest = (ND::TINGRID_version*) G__getstructoffset();
   *dest = *(ND::TINGRID_version*) libp->para[0].ref;
   const ND::TINGRID_version& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ND::TINGRID_version */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTINGRID_version_Dict {
 public:
  G__Sizep2memfuncTINGRID_version_Dict(): p(&G__Sizep2memfuncTINGRID_version_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTINGRID_version_Dict::*p)();
};

size_t G__get_sizep2memfuncTINGRID_version_Dict()
{
  G__Sizep2memfuncTINGRID_version_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTINGRID_version_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version))) {
     ND::TINGRID_version *G__Lderived;
     G__Lderived=(ND::TINGRID_version*)0x1000;
     {
       ND::TPackageVersion *G__Lpbase=(ND::TPackageVersion*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version),G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTPackageVersion),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version),G__get_linked_tagnum(&G__TINGRID_version_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTINGRID_version_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ND::TINGRID_version */
static void G__setup_memvarNDcLcLTINGRID_version(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version));
   { ND::TINGRID_version *p; p=(ND::TINGRID_version*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version),-1,-2,4,"fThis=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TINGRID_version_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTINGRID_version_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncNDcLcLTINGRID_version(void) {
   /* ND::TINGRID_version */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version));
   G__memfunc_setup("TINGRID_version",1398,G__TINGRID_version_Dict_141_0_1, 105, G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__TINGRID_version_Dict_141_0_2, 85, G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (ND::TINGRID_version* (*)())(&ND::TINGRID_version::Get), 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVersion",1030,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCompilationDate",1821,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCompilationHost",1853,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCompilationDirectory",2388,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCompilationMachineInfo",2528,G__TINGRID_version_Dict_141_0_8, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TINGRID_version_Dict_141_0_10, 85, G__get_linked_tagnum(&G__TINGRID_version_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&ND::TINGRID_version::Class), 0);
   G__memfunc_setup("Class_Name",982,G__TINGRID_version_Dict_141_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ND::TINGRID_version::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__TINGRID_version_Dict_141_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&ND::TINGRID_version::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__TINGRID_version_Dict_141_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&ND::TINGRID_version::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TINGRID_version_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TINGRID_version_Dict_141_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TINGRID_version_Dict_141_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ND::TINGRID_version::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TINGRID_version_Dict_141_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&ND::TINGRID_version::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__TINGRID_version_Dict_141_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ND::TINGRID_version::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TINGRID_version_Dict_141_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&ND::TINGRID_version::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("TINGRID_version", 1398, G__TINGRID_version_Dict_141_0_22, (int) ('i'), G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version), -1, 0, 1, 1, 1, 0, "u 'ND::TINGRID_version' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TINGRID_version", 1524, G__TINGRID_version_Dict_141_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TINGRID_version_Dict_141_0_24, (int) ('u'), G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version), -1, 1, 1, 1, 1, 0, "u 'ND::TINGRID_version' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTINGRID_version_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTINGRID_version_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTINGRID_version_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TINGRID_version_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TINGRID_version_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TINGRID_version_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TINGRID_version_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TINGRID_version_DictLN_ND = { "ND" , 110 , -1 };
G__linked_taginfo G__TINGRID_version_DictLN_NDcLcLTPackageVersion = { "ND::TPackageVersion" , 99 , -1 };
G__linked_taginfo G__TINGRID_version_DictLN_NDcLcLTINGRID_version = { "ND::TINGRID_version" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTINGRID_version_Dict() {
  G__TINGRID_version_DictLN_TClass.tagnum = -1 ;
  G__TINGRID_version_DictLN_TBuffer.tagnum = -1 ;
  G__TINGRID_version_DictLN_TMemberInspector.tagnum = -1 ;
  G__TINGRID_version_DictLN_TObject.tagnum = -1 ;
  G__TINGRID_version_DictLN_ND.tagnum = -1 ;
  G__TINGRID_version_DictLN_NDcLcLTPackageVersion.tagnum = -1 ;
  G__TINGRID_version_DictLN_NDcLcLTINGRID_version.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTINGRID_version_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TINGRID_version_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TINGRID_version_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TINGRID_version_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TINGRID_version_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TINGRID_version_DictLN_ND);
   G__get_linked_tagnum_fwd(&G__TINGRID_version_DictLN_NDcLcLTPackageVersion);
   G__tagtable_setup(G__get_linked_tagnum(&G__TINGRID_version_DictLN_NDcLcLTINGRID_version),sizeof(ND::TINGRID_version),-1,292096,(char*)NULL,G__setup_memvarNDcLcLTINGRID_version,G__setup_memfuncNDcLcLTINGRID_version);
}
extern "C" void G__cpp_setupTINGRID_version_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTINGRID_version_Dict()");
  G__set_cpp_environmentTINGRID_version_Dict();
  G__cpp_setup_tagtableTINGRID_version_Dict();

  G__cpp_setup_inheritanceTINGRID_version_Dict();

  G__cpp_setup_typetableTINGRID_version_Dict();

  G__cpp_setup_memvarTINGRID_version_Dict();

  G__cpp_setup_memfuncTINGRID_version_Dict();
  G__cpp_setup_globalTINGRID_version_Dict();
  G__cpp_setup_funcTINGRID_version_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTINGRID_version_Dict();
  return;
}
class G__cpp_setup_initTINGRID_version_Dict {
  public:
    G__cpp_setup_initTINGRID_version_Dict() { G__add_setup_func("TINGRID_version_Dict",(G__incsetup)(&G__cpp_setupTINGRID_version_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTINGRID_version_Dict() { G__remove_setup_func("TINGRID_version_Dict"); }
};
G__cpp_setup_initTINGRID_version_Dict G__cpp_setup_initializerTINGRID_version_Dict;

